/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "recomm_engine_types.h"

#include <algorithm>

namespace recomm_engine { namespace idl {

int _kRecommendationResponseCodeValues[] = {
  RRC_OK,
  RRC_ERROR,
  RRC_UID_NOT_FOUND,
  RRC_NO_DOC,
  RRC_NO_CANDIDATE,
  RRC_NO_PROFILE,
  RRC_EMPTY_RANK_RESULT
};
const char* _kRecommendationResponseCodeNames[] = {
  "RRC_OK",
  "RRC_ERROR",
  "RRC_UID_NOT_FOUND",
  "RRC_NO_DOC",
  "RRC_NO_CANDIDATE",
  "RRC_NO_PROFILE",
  "RRC_EMPTY_RANK_RESULT"
};
const std::map<int, const char*> _RecommendationResponseCode_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(7, _kRecommendationResponseCodeValues, _kRecommendationResponseCodeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kStoryManagementStatusValues[] = {
  SMS_OK,
  SMS_ERROR
};
const char* _kStoryManagementStatusNames[] = {
  "SMS_OK",
  "SMS_ERROR"
};
const std::map<int, const char*> _StoryManagementStatus_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kStoryManagementStatusValues, _kStoryManagementStatusNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kUserEngagementTypeValues[] = {
  UET_CLICK,
  UET_FAVORITE,
  UET_SHARE,
  UET_LIKE
};
const char* _kUserEngagementTypeNames[] = {
  "UET_CLICK",
  "UET_FAVORITE",
  "UET_SHARE",
  "UET_LIKE"
};
const std::map<int, const char*> _UserEngagementType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kUserEngagementTypeValues, _kUserEngagementTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kRetrievalResponseCodeValues[] = {
  STATE_OK,
  STATE_ERROR,
  STATE_KEYWORD_NOT_FOUND
};
const char* _kRetrievalResponseCodeNames[] = {
  "STATE_OK",
  "STATE_ERROR",
  "STATE_KEYWORD_NOT_FOUND"
};
const std::map<int, const char*> _RetrievalResponseCode_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kRetrievalResponseCodeValues, _kRetrievalResponseCodeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

const char* RecommendationRequest::ascii_fingerprint = "52F7D5E8217C4B8FC14F1F30BF2EB41C";
const uint8_t RecommendationRequest::binary_fingerprint[16] = {0x52,0xF7,0xD5,0xE8,0x21,0x7C,0x4B,0x8F,0xC1,0x4F,0x1F,0x30,0xBF,0x2E,0xB4,0x1C};

uint32_t RecommendationRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_uid = false;
  bool isset_ip = false;
  bool isset_topN = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->uid);
          isset_uid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ip);
          isset_ip = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->topN);
          isset_topN = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_uid)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_ip)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_topN)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t RecommendationRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("RecommendationRequest");

  xfer += oprot->writeFieldBegin("uid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->uid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ip", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->ip);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("topN", ::apache::thrift::protocol::T_I16, 3);
  xfer += oprot->writeI16(this->topN);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RecommendationRequest &a, RecommendationRequest &b) {
  using ::std::swap;
  swap(a.uid, b.uid);
  swap(a.ip, b.ip);
  swap(a.topN, b.topN);
}

const char* RecommendationResult::ascii_fingerprint = "CAD99879040BB94BCA63533B6094F391";
const uint8_t RecommendationResult::binary_fingerprint[16] = {0xCA,0xD9,0x98,0x79,0x04,0x0B,0xB9,0x4B,0xCA,0x63,0x53,0x3B,0x60,0x94,0xF3,0x91};

uint32_t RecommendationResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_story_id = false;
  bool isset_score = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->story_id);
          isset_story_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->score);
          isset_score = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->debug_info);
          this->__isset.debug_info = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_story_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_score)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t RecommendationResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("RecommendationResult");

  xfer += oprot->writeFieldBegin("story_id", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->story_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("score", ::apache::thrift::protocol::T_DOUBLE, 2);
  xfer += oprot->writeDouble(this->score);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.debug_info) {
    xfer += oprot->writeFieldBegin("debug_info", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->debug_info);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RecommendationResult &a, RecommendationResult &b) {
  using ::std::swap;
  swap(a.story_id, b.story_id);
  swap(a.score, b.score);
  swap(a.debug_info, b.debug_info);
  swap(a.__isset, b.__isset);
}

const char* RecommendationResponse::ascii_fingerprint = "C04876C50242DAF31640D50DF90A7579";
const uint8_t RecommendationResponse::binary_fingerprint[16] = {0xC0,0x48,0x76,0xC5,0x02,0x42,0xDA,0xF3,0x16,0x40,0xD5,0x0D,0xF9,0x0A,0x75,0x79};

uint32_t RecommendationResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_response_code = false;
  bool isset_results = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->response_code = (RecommendationResponseCode)ecast0;
          isset_response_code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->results.clear();
            uint32_t _size1;
            ::apache::thrift::protocol::TType _etype4;
            xfer += iprot->readListBegin(_etype4, _size1);
            this->results.resize(_size1);
            uint32_t _i5;
            for (_i5 = 0; _i5 < _size1; ++_i5)
            {
              xfer += this->results[_i5].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_results = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_response_code)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_results)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t RecommendationResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("RecommendationResponse");

  xfer += oprot->writeFieldBegin("response_code", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->response_code);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("results", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->results.size()));
    std::vector<RecommendationResult> ::const_iterator _iter6;
    for (_iter6 = this->results.begin(); _iter6 != this->results.end(); ++_iter6)
    {
      xfer += (*_iter6).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RecommendationResponse &a, RecommendationResponse &b) {
  using ::std::swap;
  swap(a.response_code, b.response_code);
  swap(a.results, b.results);
}

const char* StoryProfile::ascii_fingerprint = "67C4FE21DB0D8EF31ABA6CC39AFAA67D";
const uint8_t StoryProfile::binary_fingerprint[16] = {0x67,0xC4,0xFE,0x21,0xDB,0x0D,0x8E,0xF3,0x1A,0xBA,0x6C,0xC3,0x9A,0xFA,0xA6,0x7D};

uint32_t StoryProfile::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_story_id = false;
  bool isset_keywords = false;
  bool isset_signature = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->story_id);
          isset_story_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->keywords.clear();
            uint32_t _size7;
            ::apache::thrift::protocol::TType _ktype8;
            ::apache::thrift::protocol::TType _vtype9;
            xfer += iprot->readMapBegin(_ktype8, _vtype9, _size7);
            uint32_t _i11;
            for (_i11 = 0; _i11 < _size7; ++_i11)
            {
              int64_t _key12;
              xfer += iprot->readI64(_key12);
              int32_t& _val13 = this->keywords[_key12];
              xfer += iprot->readI32(_val13);
            }
            xfer += iprot->readMapEnd();
          }
          isset_keywords = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->topics.clear();
            uint32_t _size14;
            ::apache::thrift::protocol::TType _etype17;
            xfer += iprot->readListBegin(_etype17, _size14);
            this->topics.resize(_size14);
            uint32_t _i18;
            for (_i18 = 0; _i18 < _size14; ++_i18)
            {
              xfer += iprot->readI32(this->topics[_i18]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.topics = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->signature);
          isset_signature = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_story_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_keywords)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_signature)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t StoryProfile::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("StoryProfile");

  xfer += oprot->writeFieldBegin("story_id", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->story_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("keywords", ::apache::thrift::protocol::T_MAP, 2);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I64, ::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->keywords.size()));
    std::map<int64_t, int32_t> ::const_iterator _iter19;
    for (_iter19 = this->keywords.begin(); _iter19 != this->keywords.end(); ++_iter19)
    {
      xfer += oprot->writeI64(_iter19->first);
      xfer += oprot->writeI32(_iter19->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  if (this->__isset.topics) {
    xfer += oprot->writeFieldBegin("topics", ::apache::thrift::protocol::T_LIST, 3);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->topics.size()));
      std::vector<int32_t> ::const_iterator _iter20;
      for (_iter20 = this->topics.begin(); _iter20 != this->topics.end(); ++_iter20)
      {
        xfer += oprot->writeI32((*_iter20));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("signature", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->signature);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(StoryProfile &a, StoryProfile &b) {
  using ::std::swap;
  swap(a.story_id, b.story_id);
  swap(a.keywords, b.keywords);
  swap(a.topics, b.topics);
  swap(a.signature, b.signature);
  swap(a.__isset, b.__isset);
}

const char* StoryAddingRequest::ascii_fingerprint = "15D50B2E6CD7D07EA922D3FEE80981CE";
const uint8_t StoryAddingRequest::binary_fingerprint[16] = {0x15,0xD5,0x0B,0x2E,0x6C,0xD7,0xD0,0x7E,0xA9,0x22,0xD3,0xFE,0xE8,0x09,0x81,0xCE};

uint32_t StoryAddingRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_story = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->story.read(iprot);
          isset_story = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_story)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t StoryAddingRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("StoryAddingRequest");

  xfer += oprot->writeFieldBegin("story", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->story.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(StoryAddingRequest &a, StoryAddingRequest &b) {
  using ::std::swap;
  swap(a.story, b.story);
}

const char* StoryAddingResponse::ascii_fingerprint = "8BBB3D0C3B370CB38F2D1340BB79F0AA";
const uint8_t StoryAddingResponse::binary_fingerprint[16] = {0x8B,0xBB,0x3D,0x0C,0x3B,0x37,0x0C,0xB3,0x8F,0x2D,0x13,0x40,0xBB,0x79,0xF0,0xAA};

uint32_t StoryAddingResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_status = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast21;
          xfer += iprot->readI32(ecast21);
          this->status = (StoryManagementStatus)ecast21;
          isset_status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_status)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t StoryAddingResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("StoryAddingResponse");

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(StoryAddingResponse &a, StoryAddingResponse &b) {
  using ::std::swap;
  swap(a.status, b.status);
}

const char* UserProfile::ascii_fingerprint = "2E9E4E74D2659458ADE8CE440105F612";
const uint8_t UserProfile::binary_fingerprint[16] = {0x2E,0x9E,0x4E,0x74,0xD2,0x65,0x94,0x58,0xAD,0xE8,0xCE,0x44,0x01,0x05,0xF6,0x12};

uint32_t UserProfile::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_uid = false;
  bool isset_keywords = false;
  bool isset_history = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->uid);
          isset_uid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->keywords.clear();
            uint32_t _size22;
            ::apache::thrift::protocol::TType _ktype23;
            ::apache::thrift::protocol::TType _vtype24;
            xfer += iprot->readMapBegin(_ktype23, _vtype24, _size22);
            uint32_t _i26;
            for (_i26 = 0; _i26 < _size22; ++_i26)
            {
              int64_t _key27;
              xfer += iprot->readI64(_key27);
              int32_t& _val28 = this->keywords[_key27];
              xfer += iprot->readI32(_val28);
            }
            xfer += iprot->readMapEnd();
          }
          isset_keywords = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->topics.clear();
            uint32_t _size29;
            ::apache::thrift::protocol::TType _etype32;
            xfer += iprot->readListBegin(_etype32, _size29);
            this->topics.resize(_size29);
            uint32_t _i33;
            for (_i33 = 0; _i33 < _size29; ++_i33)
            {
              xfer += iprot->readI32(this->topics[_i33]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.topics = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->history.clear();
            uint32_t _size34;
            ::apache::thrift::protocol::TType _etype37;
            xfer += iprot->readListBegin(_etype37, _size34);
            this->history.resize(_size34);
            uint32_t _i38;
            for (_i38 = 0; _i38 < _size34; ++_i38)
            {
              xfer += iprot->readI64(this->history[_i38]);
            }
            xfer += iprot->readListEnd();
          }
          isset_history = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_uid)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_keywords)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_history)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t UserProfile::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("UserProfile");

  xfer += oprot->writeFieldBegin("uid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->uid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("keywords", ::apache::thrift::protocol::T_MAP, 2);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I64, ::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->keywords.size()));
    std::map<int64_t, int32_t> ::const_iterator _iter39;
    for (_iter39 = this->keywords.begin(); _iter39 != this->keywords.end(); ++_iter39)
    {
      xfer += oprot->writeI64(_iter39->first);
      xfer += oprot->writeI32(_iter39->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  if (this->__isset.topics) {
    xfer += oprot->writeFieldBegin("topics", ::apache::thrift::protocol::T_LIST, 3);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->topics.size()));
      std::vector<int32_t> ::const_iterator _iter40;
      for (_iter40 = this->topics.begin(); _iter40 != this->topics.end(); ++_iter40)
      {
        xfer += oprot->writeI32((*_iter40));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("history", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->history.size()));
    std::vector<int64_t> ::const_iterator _iter41;
    for (_iter41 = this->history.begin(); _iter41 != this->history.end(); ++_iter41)
    {
      xfer += oprot->writeI64((*_iter41));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(UserProfile &a, UserProfile &b) {
  using ::std::swap;
  swap(a.uid, b.uid);
  swap(a.keywords, b.keywords);
  swap(a.topics, b.topics);
  swap(a.history, b.history);
  swap(a.__isset, b.__isset);
}

const char* UserHistoryItem::ascii_fingerprint = "D4463D0DA0421E5B34FED5691C125569";
const uint8_t UserHistoryItem::binary_fingerprint[16] = {0xD4,0x46,0x3D,0x0D,0xA0,0x42,0x1E,0x5B,0x34,0xFE,0xD5,0x69,0x1C,0x12,0x55,0x69};

uint32_t UserHistoryItem::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_story_id = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->story_id);
          isset_story_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast42;
          xfer += iprot->readI32(ecast42);
          this->type = (UserEngagementType)ecast42;
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->timestamp);
          this->__isset.timestamp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_story_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t UserHistoryItem::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("UserHistoryItem");

  xfer += oprot->writeFieldBegin("story_id", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->story_id);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.type) {
    xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32((int32_t)this->type);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.timestamp) {
    xfer += oprot->writeFieldBegin("timestamp", ::apache::thrift::protocol::T_I64, 3);
    xfer += oprot->writeI64(this->timestamp);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(UserHistoryItem &a, UserHistoryItem &b) {
  using ::std::swap;
  swap(a.story_id, b.story_id);
  swap(a.type, b.type);
  swap(a.timestamp, b.timestamp);
  swap(a.__isset, b.__isset);
}

const char* UserHistory::ascii_fingerprint = "C785912897479087A2B9E0BAC2804639";
const uint8_t UserHistory::binary_fingerprint[16] = {0xC7,0x85,0x91,0x28,0x97,0x47,0x90,0x87,0xA2,0xB9,0xE0,0xBA,0xC2,0x80,0x46,0x39};

uint32_t UserHistory::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->history_items.clear();
            uint32_t _size43;
            ::apache::thrift::protocol::TType _etype46;
            xfer += iprot->readListBegin(_etype46, _size43);
            this->history_items.resize(_size43);
            uint32_t _i47;
            for (_i47 = 0; _i47 < _size43; ++_i47)
            {
              xfer += this->history_items[_i47].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.history_items = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t UserHistory::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("UserHistory");

  xfer += oprot->writeFieldBegin("history_items", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->history_items.size()));
    std::vector<UserHistoryItem> ::const_iterator _iter48;
    for (_iter48 = this->history_items.begin(); _iter48 != this->history_items.end(); ++_iter48)
    {
      xfer += (*_iter48).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(UserHistory &a, UserHistory &b) {
  using ::std::swap;
  swap(a.history_items, b.history_items);
  swap(a.__isset, b.__isset);
}

const char* IndexingAttachment::ascii_fingerprint = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
const uint8_t IndexingAttachment::binary_fingerprint[16] = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

uint32_t IndexingAttachment::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_global_docid = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->global_docid);
          isset_global_docid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_global_docid)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t IndexingAttachment::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("IndexingAttachment");

  xfer += oprot->writeFieldBegin("global_docid", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->global_docid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(IndexingAttachment &a, IndexingAttachment &b) {
  using ::std::swap;
  swap(a.global_docid, b.global_docid);
}

const char* RetrievalRequestInfo::ascii_fingerprint = "6E578DA8AB10EED824A75534350EBAEF";
const uint8_t RetrievalRequestInfo::binary_fingerprint[16] = {0x6E,0x57,0x8D,0xA8,0xAB,0x10,0xEE,0xD8,0x24,0xA7,0x55,0x34,0x35,0x0E,0xBA,0xEF};

uint32_t RetrievalRequestInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_keyword = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->keyword);
          isset_keyword = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->weight);
          this->__isset.weight = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_keyword)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t RetrievalRequestInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("RetrievalRequestInfo");

  xfer += oprot->writeFieldBegin("keyword", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->keyword);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.weight) {
    xfer += oprot->writeFieldBegin("weight", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->weight);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RetrievalRequestInfo &a, RetrievalRequestInfo &b) {
  using ::std::swap;
  swap(a.keyword, b.keyword);
  swap(a.weight, b.weight);
  swap(a.__isset, b.__isset);
}

const char* RetrievalRequest::ascii_fingerprint = "2E6066C9C3F41870FD30C6EE831CB99D";
const uint8_t RetrievalRequest::binary_fingerprint[16] = {0x2E,0x60,0x66,0xC9,0xC3,0xF4,0x18,0x70,0xFD,0x30,0xC6,0xEE,0x83,0x1C,0xB9,0x9D};

uint32_t RetrievalRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_keywords = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->keywords.clear();
            uint32_t _size49;
            ::apache::thrift::protocol::TType _etype52;
            xfer += iprot->readListBegin(_etype52, _size49);
            this->keywords.resize(_size49);
            uint32_t _i53;
            for (_i53 = 0; _i53 < _size49; ++_i53)
            {
              xfer += this->keywords[_i53].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_keywords = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->debug_level);
          this->__isset.debug_level = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->log_level);
          this->__isset.log_level = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_keywords)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t RetrievalRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("RetrievalRequest");

  xfer += oprot->writeFieldBegin("keywords", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->keywords.size()));
    std::vector<RetrievalRequestInfo> ::const_iterator _iter54;
    for (_iter54 = this->keywords.begin(); _iter54 != this->keywords.end(); ++_iter54)
    {
      xfer += (*_iter54).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  if (this->__isset.debug_level) {
    xfer += oprot->writeFieldBegin("debug_level", ::apache::thrift::protocol::T_I16, 2);
    xfer += oprot->writeI16(this->debug_level);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.log_level) {
    xfer += oprot->writeFieldBegin("log_level", ::apache::thrift::protocol::T_I16, 3);
    xfer += oprot->writeI16(this->log_level);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RetrievalRequest &a, RetrievalRequest &b) {
  using ::std::swap;
  swap(a.keywords, b.keywords);
  swap(a.debug_level, b.debug_level);
  swap(a.log_level, b.log_level);
  swap(a.__isset, b.__isset);
}

const char* RetrievalResult::ascii_fingerprint = "316DE5F40697D7307385A4B83F574754";
const uint8_t RetrievalResult::binary_fingerprint[16] = {0x31,0x6D,0xE5,0xF4,0x06,0x97,0xD7,0x30,0x73,0x85,0xA4,0xB8,0x3F,0x57,0x47,0x54};

uint32_t RetrievalResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_story_id = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->story_id);
          isset_story_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->score);
          this->__isset.score = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_story_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t RetrievalResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("RetrievalResult");

  xfer += oprot->writeFieldBegin("story_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->story_id);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.score) {
    xfer += oprot->writeFieldBegin("score", ::apache::thrift::protocol::T_DOUBLE, 2);
    xfer += oprot->writeDouble(this->score);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RetrievalResult &a, RetrievalResult &b) {
  using ::std::swap;
  swap(a.story_id, b.story_id);
  swap(a.score, b.score);
  swap(a.__isset, b.__isset);
}

const char* RetrievalResponse::ascii_fingerprint = "191E7FE174C9CE1B28DCD164EAE803E3";
const uint8_t RetrievalResponse::binary_fingerprint[16] = {0x19,0x1E,0x7F,0xE1,0x74,0xC9,0xCE,0x1B,0x28,0xDC,0xD1,0x64,0xEA,0xE8,0x03,0xE3};

uint32_t RetrievalResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_resp_code = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast55;
          xfer += iprot->readI32(ecast55);
          this->resp_code = (RetrievalResponseCode)ecast55;
          isset_resp_code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->num_results);
          this->__isset.num_results = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->results.clear();
            uint32_t _size56;
            ::apache::thrift::protocol::TType _etype59;
            xfer += iprot->readListBegin(_etype59, _size56);
            this->results.resize(_size56);
            uint32_t _i60;
            for (_i60 = 0; _i60 < _size56; ++_i60)
            {
              xfer += this->results[_i60].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.results = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_resp_code)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t RetrievalResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("RetrievalResponse");

  xfer += oprot->writeFieldBegin("resp_code", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->resp_code);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.num_results) {
    xfer += oprot->writeFieldBegin("num_results", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->num_results);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.results) {
    xfer += oprot->writeFieldBegin("results", ::apache::thrift::protocol::T_LIST, 3);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->results.size()));
      std::vector<RetrievalResult> ::const_iterator _iter61;
      for (_iter61 = this->results.begin(); _iter61 != this->results.end(); ++_iter61)
      {
        xfer += (*_iter61).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RetrievalResponse &a, RetrievalResponse &b) {
  using ::std::swap;
  swap(a.resp_code, b.resp_code);
  swap(a.num_results, b.num_results);
  swap(a.results, b.results);
  swap(a.__isset, b.__isset);
}

}} // namespace
