/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.sina.recomm.engine.idl;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class RetrievalRequest implements org.apache.thrift.TBase<RetrievalRequest, RetrievalRequest._Fields>, java.io.Serializable, Cloneable, Comparable<RetrievalRequest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RetrievalRequest");

  private static final org.apache.thrift.protocol.TField KEYWORDS_FIELD_DESC = new org.apache.thrift.protocol.TField("keywords", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField DEBUG_LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("debug_level", org.apache.thrift.protocol.TType.I16, (short)2);
  private static final org.apache.thrift.protocol.TField LOG_LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("log_level", org.apache.thrift.protocol.TType.I16, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new RetrievalRequestStandardSchemeFactory());
    schemes.put(TupleScheme.class, new RetrievalRequestTupleSchemeFactory());
  }

  public List<RetrievalRequestInfo> keywords; // required
  public short debug_level; // optional
  public short log_level; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    KEYWORDS((short)1, "keywords"),
    DEBUG_LEVEL((short)2, "debug_level"),
    LOG_LEVEL((short)3, "log_level");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // KEYWORDS
          return KEYWORDS;
        case 2: // DEBUG_LEVEL
          return DEBUG_LEVEL;
        case 3: // LOG_LEVEL
          return LOG_LEVEL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __DEBUG_LEVEL_ISSET_ID = 0;
  private static final int __LOG_LEVEL_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.DEBUG_LEVEL,_Fields.LOG_LEVEL};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.KEYWORDS, new org.apache.thrift.meta_data.FieldMetaData("keywords", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RetrievalRequestInfo.class))));
    tmpMap.put(_Fields.DEBUG_LEVEL, new org.apache.thrift.meta_data.FieldMetaData("debug_level", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.LOG_LEVEL, new org.apache.thrift.meta_data.FieldMetaData("log_level", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RetrievalRequest.class, metaDataMap);
  }

  public RetrievalRequest() {
    this.debug_level = (short)0;

    this.log_level = (short)0;

  }

  public RetrievalRequest(
    List<RetrievalRequestInfo> keywords)
  {
    this();
    this.keywords = keywords;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RetrievalRequest(RetrievalRequest other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetKeywords()) {
      List<RetrievalRequestInfo> __this__keywords = new ArrayList<RetrievalRequestInfo>(other.keywords.size());
      for (RetrievalRequestInfo other_element : other.keywords) {
        __this__keywords.add(new RetrievalRequestInfo(other_element));
      }
      this.keywords = __this__keywords;
    }
    this.debug_level = other.debug_level;
    this.log_level = other.log_level;
  }

  public RetrievalRequest deepCopy() {
    return new RetrievalRequest(this);
  }

  @Override
  public void clear() {
    this.keywords = null;
    this.debug_level = (short)0;

    this.log_level = (short)0;

  }

  public int getKeywordsSize() {
    return (this.keywords == null) ? 0 : this.keywords.size();
  }

  public java.util.Iterator<RetrievalRequestInfo> getKeywordsIterator() {
    return (this.keywords == null) ? null : this.keywords.iterator();
  }

  public void addToKeywords(RetrievalRequestInfo elem) {
    if (this.keywords == null) {
      this.keywords = new ArrayList<RetrievalRequestInfo>();
    }
    this.keywords.add(elem);
  }

  public List<RetrievalRequestInfo> getKeywords() {
    return this.keywords;
  }

  public RetrievalRequest setKeywords(List<RetrievalRequestInfo> keywords) {
    this.keywords = keywords;
    return this;
  }

  public void unsetKeywords() {
    this.keywords = null;
  }

  /** Returns true if field keywords is set (has been assigned a value) and false otherwise */
  public boolean isSetKeywords() {
    return this.keywords != null;
  }

  public void setKeywordsIsSet(boolean value) {
    if (!value) {
      this.keywords = null;
    }
  }

  public short getDebug_level() {
    return this.debug_level;
  }

  public RetrievalRequest setDebug_level(short debug_level) {
    this.debug_level = debug_level;
    setDebug_levelIsSet(true);
    return this;
  }

  public void unsetDebug_level() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEBUG_LEVEL_ISSET_ID);
  }

  /** Returns true if field debug_level is set (has been assigned a value) and false otherwise */
  public boolean isSetDebug_level() {
    return EncodingUtils.testBit(__isset_bitfield, __DEBUG_LEVEL_ISSET_ID);
  }

  public void setDebug_levelIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEBUG_LEVEL_ISSET_ID, value);
  }

  public short getLog_level() {
    return this.log_level;
  }

  public RetrievalRequest setLog_level(short log_level) {
    this.log_level = log_level;
    setLog_levelIsSet(true);
    return this;
  }

  public void unsetLog_level() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOG_LEVEL_ISSET_ID);
  }

  /** Returns true if field log_level is set (has been assigned a value) and false otherwise */
  public boolean isSetLog_level() {
    return EncodingUtils.testBit(__isset_bitfield, __LOG_LEVEL_ISSET_ID);
  }

  public void setLog_levelIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOG_LEVEL_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case KEYWORDS:
      if (value == null) {
        unsetKeywords();
      } else {
        setKeywords((List<RetrievalRequestInfo>)value);
      }
      break;

    case DEBUG_LEVEL:
      if (value == null) {
        unsetDebug_level();
      } else {
        setDebug_level((Short)value);
      }
      break;

    case LOG_LEVEL:
      if (value == null) {
        unsetLog_level();
      } else {
        setLog_level((Short)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case KEYWORDS:
      return getKeywords();

    case DEBUG_LEVEL:
      return Short.valueOf(getDebug_level());

    case LOG_LEVEL:
      return Short.valueOf(getLog_level());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case KEYWORDS:
      return isSetKeywords();
    case DEBUG_LEVEL:
      return isSetDebug_level();
    case LOG_LEVEL:
      return isSetLog_level();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof RetrievalRequest)
      return this.equals((RetrievalRequest)that);
    return false;
  }

  public boolean equals(RetrievalRequest that) {
    if (that == null)
      return false;

    boolean this_present_keywords = true && this.isSetKeywords();
    boolean that_present_keywords = true && that.isSetKeywords();
    if (this_present_keywords || that_present_keywords) {
      if (!(this_present_keywords && that_present_keywords))
        return false;
      if (!this.keywords.equals(that.keywords))
        return false;
    }

    boolean this_present_debug_level = true && this.isSetDebug_level();
    boolean that_present_debug_level = true && that.isSetDebug_level();
    if (this_present_debug_level || that_present_debug_level) {
      if (!(this_present_debug_level && that_present_debug_level))
        return false;
      if (this.debug_level != that.debug_level)
        return false;
    }

    boolean this_present_log_level = true && this.isSetLog_level();
    boolean that_present_log_level = true && that.isSetLog_level();
    if (this_present_log_level || that_present_log_level) {
      if (!(this_present_log_level && that_present_log_level))
        return false;
      if (this.log_level != that.log_level)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(RetrievalRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetKeywords()).compareTo(other.isSetKeywords());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKeywords()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.keywords, other.keywords);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDebug_level()).compareTo(other.isSetDebug_level());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDebug_level()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.debug_level, other.debug_level);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLog_level()).compareTo(other.isSetLog_level());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLog_level()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.log_level, other.log_level);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("RetrievalRequest(");
    boolean first = true;

    sb.append("keywords:");
    if (this.keywords == null) {
      sb.append("null");
    } else {
      sb.append(this.keywords);
    }
    first = false;
    if (isSetDebug_level()) {
      if (!first) sb.append(", ");
      sb.append("debug_level:");
      sb.append(this.debug_level);
      first = false;
    }
    if (isSetLog_level()) {
      if (!first) sb.append(", ");
      sb.append("log_level:");
      sb.append(this.log_level);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (keywords == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'keywords' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RetrievalRequestStandardSchemeFactory implements SchemeFactory {
    public RetrievalRequestStandardScheme getScheme() {
      return new RetrievalRequestStandardScheme();
    }
  }

  private static class RetrievalRequestStandardScheme extends StandardScheme<RetrievalRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RetrievalRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // KEYWORDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list60 = iprot.readListBegin();
                struct.keywords = new ArrayList<RetrievalRequestInfo>(_list60.size);
                for (int _i61 = 0; _i61 < _list60.size; ++_i61)
                {
                  RetrievalRequestInfo _elem62;
                  _elem62 = new RetrievalRequestInfo();
                  _elem62.read(iprot);
                  struct.keywords.add(_elem62);
                }
                iprot.readListEnd();
              }
              struct.setKeywordsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DEBUG_LEVEL
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.debug_level = iprot.readI16();
              struct.setDebug_levelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LOG_LEVEL
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.log_level = iprot.readI16();
              struct.setLog_levelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RetrievalRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.keywords != null) {
        oprot.writeFieldBegin(KEYWORDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.keywords.size()));
          for (RetrievalRequestInfo _iter63 : struct.keywords)
          {
            _iter63.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.isSetDebug_level()) {
        oprot.writeFieldBegin(DEBUG_LEVEL_FIELD_DESC);
        oprot.writeI16(struct.debug_level);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLog_level()) {
        oprot.writeFieldBegin(LOG_LEVEL_FIELD_DESC);
        oprot.writeI16(struct.log_level);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RetrievalRequestTupleSchemeFactory implements SchemeFactory {
    public RetrievalRequestTupleScheme getScheme() {
      return new RetrievalRequestTupleScheme();
    }
  }

  private static class RetrievalRequestTupleScheme extends TupleScheme<RetrievalRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RetrievalRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      {
        oprot.writeI32(struct.keywords.size());
        for (RetrievalRequestInfo _iter64 : struct.keywords)
        {
          _iter64.write(oprot);
        }
      }
      BitSet optionals = new BitSet();
      if (struct.isSetDebug_level()) {
        optionals.set(0);
      }
      if (struct.isSetLog_level()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetDebug_level()) {
        oprot.writeI16(struct.debug_level);
      }
      if (struct.isSetLog_level()) {
        oprot.writeI16(struct.log_level);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RetrievalRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      {
        org.apache.thrift.protocol.TList _list65 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.keywords = new ArrayList<RetrievalRequestInfo>(_list65.size);
        for (int _i66 = 0; _i66 < _list65.size; ++_i66)
        {
          RetrievalRequestInfo _elem67;
          _elem67 = new RetrievalRequestInfo();
          _elem67.read(iprot);
          struct.keywords.add(_elem67);
        }
      }
      struct.setKeywordsIsSet(true);
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.debug_level = iprot.readI16();
        struct.setDebug_levelIsSet(true);
      }
      if (incoming.get(1)) {
        struct.log_level = iprot.readI16();
        struct.setLog_levelIsSet(true);
      }
    }
  }

}

