/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.sina.recomm.engine.idl;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class RetrievalResponse implements org.apache.thrift.TBase<RetrievalResponse, RetrievalResponse._Fields>, java.io.Serializable, Cloneable, Comparable<RetrievalResponse> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RetrievalResponse");

  private static final org.apache.thrift.protocol.TField RESP_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("resp_code", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField NUM_RESULTS_FIELD_DESC = new org.apache.thrift.protocol.TField("num_results", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField RESULTS_FIELD_DESC = new org.apache.thrift.protocol.TField("results", org.apache.thrift.protocol.TType.LIST, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new RetrievalResponseStandardSchemeFactory());
    schemes.put(TupleScheme.class, new RetrievalResponseTupleSchemeFactory());
  }

  /**
   * 
   * @see RetrievalResponseCode
   */
  public RetrievalResponseCode resp_code; // required
  public int num_results; // optional
  public List<RetrievalResult> results; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see RetrievalResponseCode
     */
    RESP_CODE((short)1, "resp_code"),
    NUM_RESULTS((short)2, "num_results"),
    RESULTS((short)3, "results");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // RESP_CODE
          return RESP_CODE;
        case 2: // NUM_RESULTS
          return NUM_RESULTS;
        case 3: // RESULTS
          return RESULTS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __NUM_RESULTS_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.NUM_RESULTS,_Fields.RESULTS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.RESP_CODE, new org.apache.thrift.meta_data.FieldMetaData("resp_code", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, RetrievalResponseCode.class)));
    tmpMap.put(_Fields.NUM_RESULTS, new org.apache.thrift.meta_data.FieldMetaData("num_results", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RESULTS, new org.apache.thrift.meta_data.FieldMetaData("results", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RetrievalResult.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RetrievalResponse.class, metaDataMap);
  }

  public RetrievalResponse() {
    this.resp_code = com.sina.recomm.engine.idl.RetrievalResponseCode.STATE_OK;

    this.num_results = 0;

  }

  public RetrievalResponse(
    RetrievalResponseCode resp_code)
  {
    this();
    this.resp_code = resp_code;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RetrievalResponse(RetrievalResponse other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetResp_code()) {
      this.resp_code = other.resp_code;
    }
    this.num_results = other.num_results;
    if (other.isSetResults()) {
      List<RetrievalResult> __this__results = new ArrayList<RetrievalResult>(other.results.size());
      for (RetrievalResult other_element : other.results) {
        __this__results.add(new RetrievalResult(other_element));
      }
      this.results = __this__results;
    }
  }

  public RetrievalResponse deepCopy() {
    return new RetrievalResponse(this);
  }

  @Override
  public void clear() {
    this.resp_code = com.sina.recomm.engine.idl.RetrievalResponseCode.STATE_OK;

    this.num_results = 0;

    this.results = null;
  }

  /**
   * 
   * @see RetrievalResponseCode
   */
  public RetrievalResponseCode getResp_code() {
    return this.resp_code;
  }

  /**
   * 
   * @see RetrievalResponseCode
   */
  public RetrievalResponse setResp_code(RetrievalResponseCode resp_code) {
    this.resp_code = resp_code;
    return this;
  }

  public void unsetResp_code() {
    this.resp_code = null;
  }

  /** Returns true if field resp_code is set (has been assigned a value) and false otherwise */
  public boolean isSetResp_code() {
    return this.resp_code != null;
  }

  public void setResp_codeIsSet(boolean value) {
    if (!value) {
      this.resp_code = null;
    }
  }

  public int getNum_results() {
    return this.num_results;
  }

  public RetrievalResponse setNum_results(int num_results) {
    this.num_results = num_results;
    setNum_resultsIsSet(true);
    return this;
  }

  public void unsetNum_results() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUM_RESULTS_ISSET_ID);
  }

  /** Returns true if field num_results is set (has been assigned a value) and false otherwise */
  public boolean isSetNum_results() {
    return EncodingUtils.testBit(__isset_bitfield, __NUM_RESULTS_ISSET_ID);
  }

  public void setNum_resultsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUM_RESULTS_ISSET_ID, value);
  }

  public int getResultsSize() {
    return (this.results == null) ? 0 : this.results.size();
  }

  public java.util.Iterator<RetrievalResult> getResultsIterator() {
    return (this.results == null) ? null : this.results.iterator();
  }

  public void addToResults(RetrievalResult elem) {
    if (this.results == null) {
      this.results = new ArrayList<RetrievalResult>();
    }
    this.results.add(elem);
  }

  public List<RetrievalResult> getResults() {
    return this.results;
  }

  public RetrievalResponse setResults(List<RetrievalResult> results) {
    this.results = results;
    return this;
  }

  public void unsetResults() {
    this.results = null;
  }

  /** Returns true if field results is set (has been assigned a value) and false otherwise */
  public boolean isSetResults() {
    return this.results != null;
  }

  public void setResultsIsSet(boolean value) {
    if (!value) {
      this.results = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case RESP_CODE:
      if (value == null) {
        unsetResp_code();
      } else {
        setResp_code((RetrievalResponseCode)value);
      }
      break;

    case NUM_RESULTS:
      if (value == null) {
        unsetNum_results();
      } else {
        setNum_results((Integer)value);
      }
      break;

    case RESULTS:
      if (value == null) {
        unsetResults();
      } else {
        setResults((List<RetrievalResult>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case RESP_CODE:
      return getResp_code();

    case NUM_RESULTS:
      return Integer.valueOf(getNum_results());

    case RESULTS:
      return getResults();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case RESP_CODE:
      return isSetResp_code();
    case NUM_RESULTS:
      return isSetNum_results();
    case RESULTS:
      return isSetResults();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof RetrievalResponse)
      return this.equals((RetrievalResponse)that);
    return false;
  }

  public boolean equals(RetrievalResponse that) {
    if (that == null)
      return false;

    boolean this_present_resp_code = true && this.isSetResp_code();
    boolean that_present_resp_code = true && that.isSetResp_code();
    if (this_present_resp_code || that_present_resp_code) {
      if (!(this_present_resp_code && that_present_resp_code))
        return false;
      if (!this.resp_code.equals(that.resp_code))
        return false;
    }

    boolean this_present_num_results = true && this.isSetNum_results();
    boolean that_present_num_results = true && that.isSetNum_results();
    if (this_present_num_results || that_present_num_results) {
      if (!(this_present_num_results && that_present_num_results))
        return false;
      if (this.num_results != that.num_results)
        return false;
    }

    boolean this_present_results = true && this.isSetResults();
    boolean that_present_results = true && that.isSetResults();
    if (this_present_results || that_present_results) {
      if (!(this_present_results && that_present_results))
        return false;
      if (!this.results.equals(that.results))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(RetrievalResponse other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetResp_code()).compareTo(other.isSetResp_code());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResp_code()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resp_code, other.resp_code);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNum_results()).compareTo(other.isSetNum_results());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNum_results()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num_results, other.num_results);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResults()).compareTo(other.isSetResults());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResults()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.results, other.results);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("RetrievalResponse(");
    boolean first = true;

    sb.append("resp_code:");
    if (this.resp_code == null) {
      sb.append("null");
    } else {
      sb.append(this.resp_code);
    }
    first = false;
    if (isSetNum_results()) {
      if (!first) sb.append(", ");
      sb.append("num_results:");
      sb.append(this.num_results);
      first = false;
    }
    if (isSetResults()) {
      if (!first) sb.append(", ");
      sb.append("results:");
      if (this.results == null) {
        sb.append("null");
      } else {
        sb.append(this.results);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (resp_code == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'resp_code' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RetrievalResponseStandardSchemeFactory implements SchemeFactory {
    public RetrievalResponseStandardScheme getScheme() {
      return new RetrievalResponseStandardScheme();
    }
  }

  private static class RetrievalResponseStandardScheme extends StandardScheme<RetrievalResponse> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RetrievalResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // RESP_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.resp_code = RetrievalResponseCode.findByValue(iprot.readI32());
              struct.setResp_codeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NUM_RESULTS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.num_results = iprot.readI32();
              struct.setNum_resultsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // RESULTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list68 = iprot.readListBegin();
                struct.results = new ArrayList<RetrievalResult>(_list68.size);
                for (int _i69 = 0; _i69 < _list68.size; ++_i69)
                {
                  RetrievalResult _elem70;
                  _elem70 = new RetrievalResult();
                  _elem70.read(iprot);
                  struct.results.add(_elem70);
                }
                iprot.readListEnd();
              }
              struct.setResultsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RetrievalResponse struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.resp_code != null) {
        oprot.writeFieldBegin(RESP_CODE_FIELD_DESC);
        oprot.writeI32(struct.resp_code.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.isSetNum_results()) {
        oprot.writeFieldBegin(NUM_RESULTS_FIELD_DESC);
        oprot.writeI32(struct.num_results);
        oprot.writeFieldEnd();
      }
      if (struct.results != null) {
        if (struct.isSetResults()) {
          oprot.writeFieldBegin(RESULTS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.results.size()));
            for (RetrievalResult _iter71 : struct.results)
            {
              _iter71.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RetrievalResponseTupleSchemeFactory implements SchemeFactory {
    public RetrievalResponseTupleScheme getScheme() {
      return new RetrievalResponseTupleScheme();
    }
  }

  private static class RetrievalResponseTupleScheme extends TupleScheme<RetrievalResponse> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RetrievalResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.resp_code.getValue());
      BitSet optionals = new BitSet();
      if (struct.isSetNum_results()) {
        optionals.set(0);
      }
      if (struct.isSetResults()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetNum_results()) {
        oprot.writeI32(struct.num_results);
      }
      if (struct.isSetResults()) {
        {
          oprot.writeI32(struct.results.size());
          for (RetrievalResult _iter72 : struct.results)
          {
            _iter72.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RetrievalResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.resp_code = RetrievalResponseCode.findByValue(iprot.readI32());
      struct.setResp_codeIsSet(true);
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.num_results = iprot.readI32();
        struct.setNum_resultsIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list73 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.results = new ArrayList<RetrievalResult>(_list73.size);
          for (int _i74 = 0; _i74 < _list73.size; ++_i74)
          {
            RetrievalResult _elem75;
            _elem75 = new RetrievalResult();
            _elem75.read(iprot);
            struct.results.add(_elem75);
          }
        }
        struct.setResultsIsSet(true);
      }
    }
  }

}

